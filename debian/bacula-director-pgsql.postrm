#! /bin/sh
# postrm script for bacula
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule
db_version 2.0

dbc_first_version=1.38.9-2
dbc_dbuser=bacula
dbc_dbname=bacula

. /usr/share/dbconfig-common/dpkg/postrm.pgsql
dbc_go bacula-director-pgsql $@

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <r>overwrit>r> <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


CATALOG=bacula
PGSQL=/usr/bin/psql
CONFFILE=/etc/bacula/bacula-dir.conf
AUTHFILE=`getent passwd bacula | cut -d ':' -f 6`/.pgpass

backup_pgpass () {
	if [ -f $DB_ADMIN_AUTHFILE ]; then
		mv $DB_ADMIN_AUTHFILE ${DB_ADMIN_AUTHFILE}.bak
	fi
}
restore_pgpass () {
	rm -f $DB_ADMIN_AUTHFILE
	if [ -f ${DB_ADMIN_AUTHFILE}.bak ]; then
		mv ${DB_ADMIN_AUTHFILE}.bak $DB_ADMIN_AUTHFILE
	else
		rm -f $DB_ADMIN_AUTHFILE
	fi
}

case "$1" in
	purge)
		rm -f $CONFFILE $CONFFILE.dist $AUTHFILE

		db_get bacula-director-pgsql/remove_catalog_on_purge || true
		if [ "$RET" = "true" ]; then
			db_get bacula-director-pgsql/db_host || true
			PGSQL_HOST="$RET"
			db_get bacula-director-pgsql/pgsql_root_username || true
			DB_ADMIN="$RET"
        
			# default: "localhost"
			if [ "$PGSQL_HOST" != "localhost" ];  then 
				db_input medium bacula-director-pgsql/pgsql_root_password || true
				db_go
			
				PGSQL_HOST_STRING="-h $PGSQL_HOST"
				PGSQL_CONN_STRING="$PGSQL_HOST_STRING -U $DB_ADMIN"
				PGCMD="eval"
				PGCMDUSER=`id -nu`
			else
				if ! getent passwd $DB_ADMIN >/dev/null ; then
					echo -e "\nFATAL: the specified DB Administrator does not exist in 'passwd' databases"
					exit 1
				fi
		
				PGSQL_HOST_STRING=""
				PGSQL_CONN_STRING=""
				PGCMD="su -s /bin/sh $DB_ADMIN -c"
				PGCMDUSER=$DB_ADMIN
			fi
	
			db_get bacula-director-pgsql/pgsql_root_password || true
			DB_ADMIN_PSWD="$RET"
		
			DB_ADMIN_AUTHFILE=`getent passwd $PGCMDUSER | cut -d ':' -f 6`/.pgpass

			backup_pgpass
			echo "$PGSQL_HOST:*:*:$DB_ADMIN:$DB_ADMIN_PSWD" > $DB_ADMIN_AUTHFILE
			chown $PGCMDUSER:root $DB_ADMIN_AUTHFILE 
			chmod 0600 $DB_ADMIN_AUTHFILE
		
			db_get bacula-director-pgsql/db_user || true
			DBUSER="$RET"

			echo -n "Removing PostgreSQL User '$DBUSER' at '$PGSQL_HOST'... "
			if ! $PGCMD "$PGSQL $PGSQL_CONN_STRING -d template1 \
				-c \"DROP USER $DBUSER;\"" >/dev/null  2>&1; then
				echo -e "\nERROR: Drop user failed!\n";
			else
				echo "Ok."
			fi
		
			echo -n "Removing Catalog '$CATALOG' at '$PGSQL_HOST'... "
			if ! $PGCMD "$PGSQL $PGSQL_CONN_STRING -d template1 \
				-c \"DROP DATABASE $CATALOG;\"" >/dev/null  2>&1; then
				echo -e "\nERROR: Drop catalog failed!\n";
			else
				echo "Ok."
			fi

			restore_pgpass

		fi  # remove_catalog_on_purge = "true"

		db_purge
	;;

	remove)
		# ... so that a replacement bacula-director-* can do as needed.
		rm -f $CONFFILE.dist
	;;
	upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)

        ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
