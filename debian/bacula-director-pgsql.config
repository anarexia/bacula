#!/bin/sh
# config script for bacula-dir ( PostgreSQL flavor )
#
# by Jose Luis Tallon <jltallon@adv-solutions.net>
# based upon work by
# - Alvaro Hernandez <aht@ahtech.net>
# - Philipp Matthias Hahn <pmhahn@debian.org>

. /usr/share/debconf/confmodule
db_version 2.0

db_title "Bacula Director"

set -e

CATALOG="bacula"
PGSQL=/usr/bin/psql
AUTHFILE=`getent passwd bacula | cut -d ':' -f 6`/.pgpass

backup_pgpass () {
	if [ -f $AUTHFILE ]; then
		mv $AUTHFILE ${AUTHFILE}.bak
	fi
}
restore_pgpass () {
	rm -f $AUTHFILE
	if [ -f ${AUTHFILE}.bak ]; then
		mv ${AUTHFILE}.bak $AUTHFILE
	else
		rm -f $AUTHFILE
	fi
}

case "$1" in
        configure)

 		db_input medium bacula-director-pgsql/db_host || true
	 	db_go || true
		db_get bacula-director-pgsql/db_host; PGSQL_HOST="$RET";

		db_beginblock
 			#db_input medium bacula-director-pgsql/db_user || true
 			db_input medium bacula-director-pgsql/db_password || true
 		db_endblock
	 	db_go || true
 		
		db_input medium bacula-director-pgsql/create_tables || true
		db_go || true

		db_get bacula-director-pgsql/create_tables || true
		if [ "$RET" = "true" ]; then
		
			db_beginblock
			
			# ask for PgSQL admin's username (default: postgres)
			db_input medium bacula-director-pgsql/pgsql_root_username || true
		
			if [ "$PGSQL_HOST" != "localhost" ]; then		
				# if localhost, we need not ask for the password :-)
				db_input medium bacula-director-pgsql/pgsql_root_password || true
			fi
			
			db_endblock
			db_go || true 
		fi

		db_set bacula-director-pgsql/drop_db false
		db_input medium bacula-director-pgsql/remove_catalog_on_purge || true
		db_go || true
        ;;

	reconfigure)

 		# We have all dependencies configured, so we can be a bit more clever :)
 		#
 		db_input medium bacula-director-pgsql/db_host || true
	 	db_go || true
		db_get bacula-director-pgsql/db_host; PGSQL_HOST="$RET";
 	
		db_beginblock
 			#db_input medium bacula-director-pgsql/db_user || true
 			db_input medium bacula-director-pgsql/db_password || true
 		db_endblock
	 	db_go || true
 		
 		db_get bacula-director-pgsql/db_user; PGSQL_USER="$RET";
 		db_get bacula-director-pgsql/db_password; PGSQL_PSWD="$RET";
		
		db_set bacula-director-pgsql/drop_db false

		PGSQL_HOST_STRING=""
        	if [ "$PGSQL_HOST" != "localhost" ];  then 
			PGSQL_HOST_STRING="-h $PGSQL_HOST"
		fi

		PGSQL_CONN_STRING="$PGSQL_HOST_STRING -U $PGSQL_USER"

 		# if psql-client is not available, there's no point in
 		# trying to configure ... yes?
 		# test -x $PGSQL || exit 0
		RESULT=""
		LISTOBJ="su -s /bin/sh bacula -c \"$PGSQL $PGSQL_CONN_STRING -t -A -F : -c '\d\q' $CATALOG 2>&1\""
	
		# Try with previous auth info if available, it may be valid
		PASSCHECK=`grep "$PGSQL_HOST:\*:$CATALOG:$PGSQL_USER" $AUTHFILE 2>/dev/null | sed -n 1p`
		if [ -n "$PASSCHECK" ]; then
			RESULT=`eval $LISTOBJ` || true
			case $RESULT in
				"*ERROR*"|"*FATAL*") 
					RESULT=""
					# reset to try again
					;;
			esac
		fi

		if [ -z "$RESULT" ]; then
			# try the configured host/user
			backup_pgpass
			echo "$PGSQL_HOST:*:*:$PGSQL_USER:$PGSQL_PSWD" > $AUTHFILE
			chown bacula:root $AUTHFILE
			chmod 0600 $AUTHFILE
			RESULT=`eval $LISTOBJ` || true
			restore_pgpass
		fi

		case $RESULT in
		
		"psql: FATAL: * authentication failed for user"*) # Access denied
			#echo "ERROR: Access denied to PostgreSQL server!" >>/dev/fd/2
			exit 0
 			;;
			
		"psql: FATAL:  database * does not exist")      #Unknown database
			db_input medium bacula-director-pgsql/create_tables || true
			db_go || true

			db_get bacula-director-pgsql/create_tables;
			if [ "$RET" = "true" ]; then
 				db_beginblock
				db_input medium bacula-director-pgsql/pgsql_root_username || true
				if [ "$PGSQL_HOST" != "localhost" ]; then		
					db_input medium bacula-director-pgsql/pgsql_root_password || true
				fi
				db_endblock
				db_go || true
 			fi
 			;;

		ERROR*|FATAL*)  # unknown error!
			#echo "ERROR: PostgreSQL returned an unknown error code!" >>/dev/fd/2
			exit 1
 			;;

		*)	# some, or no output => database exists
			#echo "Database $CATALOG exists." > /dev/fd/2
			
			db_input medium bacula-director-pgsql/drop_db || true
			db_go || true

			db_get bacula-director-pgsql/drop_db || true
			if [ "$RET" = "true" ]; then
				db_input medium bacula-director-pgsql/create_tables || true
			        db_go || true
			else
				db_set bacula-director-pgsql/create_tables false
				exit 0
			fi

 			db_beginblock
			db_input medium bacula-director-pgsql/pgsql_root_username || true
			if [ "$PGSQL_HOST" != "localhost" ]; then		
				db_input medium bacula-director-pgsql/pgsql_root_password || true
			fi
			db_endblock
 			db_go || true
			;;
		esac

		db_input medium bacula-director-pgsql/remove_catalog_on_purge || true
		db_go || true
	;;

        *)
                echo "config called with unknown argument \$1'" >&2
                exit 0
        ;;
esac

exit 0

